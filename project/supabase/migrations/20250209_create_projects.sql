-- Drop existing table and related objects
DROP TABLE IF EXISTS projects CASCADE;

-- Create projects table
CREATE TABLE IF NOT EXISTS projects (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    image_url TEXT NOT NULL,
    tech_stack TEXT[] NOT NULL DEFAULT '{}',
    github_url TEXT,
    live_url TEXT,
    featured BOOLEAN DEFAULT false,
    priority INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = TIMEZONE('utc'::text, NOW());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to call the function before update
CREATE TRIGGER update_projects_updated_at
    BEFORE UPDATE ON projects
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Create RLS policies
ALTER TABLE projects ENABLE ROW LEVEL SECURITY;

-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Allow anonymous read access" ON projects;
DROP POLICY IF EXISTS "Allow authenticated users full access" ON projects;

-- Allow anonymous read access
CREATE POLICY "Allow anonymous read access"
ON projects FOR SELECT
TO anon
USING (true);

-- Allow authenticated users to insert/update/delete
CREATE POLICY "Allow authenticated users full access"
ON projects FOR ALL
TO authenticated
USING (true)
WITH CHECK (true);

-- Insert sample projects
INSERT INTO projects (title, description, image_url, tech_stack, github_url, live_url, featured, priority)
VALUES 
(
    'Portfolio Website',
    'A modern portfolio website built with React, TypeScript, and Tailwind CSS. Features smooth animations and dark mode.',
    'https://images.unsplash.com/photo-1487014679447-9f8336841d58',
    ARRAY['React', 'TypeScript', 'Tailwind CSS', 'Framer Motion'],
    'https://github.com/yourusername/portfolio',
    'https://yourportfolio.com',
    true,
    1
),
(
    'E-Commerce Platform',
    'Full-stack e-commerce platform with features like cart management, payment processing, and order tracking.',
    'https://images.unsplash.com/photo-1557821552-17105176677c',
    ARRAY['Next.js', 'PostgreSQL', 'Stripe', 'Prisma'],
    'https://github.com/yourusername/ecommerce',
    'https://yourecommerce.com',
    true,
    2
),
(
    'AI Chat Application',
    'Real-time chat application powered by AI for smart responses and language translation.',
    'https://images.unsplash.com/photo-1531746790731-6c087fecd65a',
    ARRAY['OpenAI', 'WebSocket', 'Redis', 'Express'],
    'https://github.com/yourusername/ai-chat',
    'https://youraichat.com',
    true,
    3
);

-- Drop existing bucket policies
DROP POLICY IF EXISTS "Public Access" ON storage.objects;
DROP POLICY IF EXISTS "Allow authenticated uploads" ON storage.objects;

-- Create storage bucket for project images (if not exists)
INSERT INTO storage.buckets (id, name, public)
SELECT 'projects', 'projects', true
WHERE NOT EXISTS (
    SELECT 1 FROM storage.buckets WHERE id = 'projects'
);

-- Create storage policies for public access
CREATE POLICY "Public Access"
ON storage.objects FOR SELECT
USING (bucket_id = 'projects');

CREATE POLICY "Allow public uploads"
ON storage.objects FOR INSERT 
WITH CHECK (bucket_id = 'projects');
